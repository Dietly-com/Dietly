// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUsers", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUsers", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name  String
  surname String?
  login String @unique
  password  String
  email String  @unique
  phone String?

  height Float?
  weight Float?
  bmi Float?
  activeLevel Int?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?

  displayTheme String?
  displayLanguage String?

  userBadges UserBadge[]
  userPersonalBests UserPersonalBest[]
  ownedDiets Diet[]
  ownedProducts Product[]
  ownedRecipes Recipe[]
  userActiveDiets UserActiveDiet[]
  userMeals UserMeal[]

  createdUsers User[] @relation("createdUsers")
  modifiedUsers User[] @relation("modifiedUsers")
  createdBadges Badge[] @relation("createdBadges")
  modifiedBadges Badge[] @relation("modifiedBadges")
  createdUserBadges UserBadge[] @relation("createdUserBadges")
  modifiedUserdBadges UserBadge[] @relation("modifiedUserBadges")
  createdPersonalBests PersonalBest[] @relation("createdPersonalBests")
  modifiedPersonalBests PersonalBest[] @relation("modifiedPersonalBests")
  createdUserPersonalBests UserPersonalBest[] @relation("createdUserPersonalBests")
  modifiedUserPersonalBests UserPersonalBest[] @relation("modifiedUserPersonalBests")
  createdUserActiveDiets UserActiveDiet[] @relation("createdUserActiveDiets")
  modifiedUserActiveDiets UserActiveDiet[] @relation("modifiedUserActiveDiets")
  createdUserMeals UserMeal[] @relation("createdUserMeals")
  modifiedUserMeals UserMeal[] @relation("modifiedUserMeals")
  createdUserMealProducts UserMealProduct[] @relation("createdUserMealProducts")
  modifiedUserMealProducts UserMealProduct[] @relation("modifiedUserMealProducts")
  createdUserMealRecipes UserMealRecipe[] @relation("createdUserMealRecipes")
  modifiedUserMealRecipes UserMealRecipe[] @relation("modifiedUserMealRecipes")
  createdUnits Unit[] @relation("createdUnits")
  modifiedUnits Unit[] @relation("modifiedUnits")
  createdNutrients Nutrient[] @relation("createdNutrients")
  modifiedNutrients Nutrient[] @relation("modifiedNutrients")
  createdProducts Product[] @relation("createdProducts")
  modifiedProducts Product[] @relation("modifiedProducts")
  createdProductNutrients ProductNutrient[] @relation("createdProductNutrients")
  modifiedProductNutrients ProductNutrient[] @relation("modifiedProductNutrients")
  createdRecipes Recipe[] @relation("createdRecipes")
  modifiedRecipes Recipe[] @relation("modifiedRecipes")
  createdRecipeProducts RecipeProduct[] @relation("createdRecipeProducts")
  modifiedRecipeProducts RecipeProduct[] @relation("modifiedRecipeProducts")
  createdDiets Diet[] @relation("createdDiets")
  modifiedDiets Diet[] @relation("modifiedDiets")
  createdDietMeals DietMeal[] @relation("createdDietMeals")
  modifiedDietMeals DietMeal[] @relation("modifiedDietMeals")
  createdDietMealRecipes DietMealRecipe[] @relation("createdDietMealRecipes")
  modifiedDietMealRecipes DietMealRecipe[] @relation("modifiedDietMealRecipes")
  createdDietMealProducts DietMealProduct[] @relation("createdDietMealProducts")
  modifiedDietMealProducts DietMealProduct[] @relation("modifiedDietMealProducts")
  createdFiles File[] @relation("createdFiles")
  modifiedFiles File[] @relation("modifiedFiles")
}

model Badge {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdBadges", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedBadges", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  description String?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?

  userBadges UserBadge[]
}

model UserBadge {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserBadges", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserBadges", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  user User @relation(fields: [userId], references: [id])
  userId Int
  badge Badge @relation(fields: [badgeId], references: [id])
  badgeId Int
  time DateTime @default(now())
}

model PersonalBest {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdPersonalBests", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedPersonalBests", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  description String?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?

  userPersonalBests UserPersonalBest[]
}

model UserPersonalBest {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserPersonalBests", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserPersonalBests", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  user User @relation(fields: [userId], references: [id])
  userId Int
  personalBest PersonalBest @relation(fields: [personalBestId], references: [id])
  personalBestId Int
}

model UserActiveDiet {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserActiveDiets", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserActiveDiets", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  user User @relation(fields: [userId], references: [id])
  userId Int
  diet Diet @relation(fields: [dietId], references: [id])
  dietId Int
  startTime DateTime
  endTime DateTime
}

model UserMeal {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserMeals", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserMeals", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  user User @relation(fields: [userId], references: [id])
  userId Int
  name String
  time DateTime

  userMealProducts UserMealProduct[]
  userMealRecipes UserMealRecipe[]
}

model UserMealProduct {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserMealProducts", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserMealProducts", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  userMeal UserMeal @relation(fields: [userMealId], references: [id])
  userMealId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
}

model UserMealRecipe {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUserMealRecipes", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUserMealRecipes", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  userMeal UserMeal @relation(fields: [userMealId], references: [id])
  userMealId Int
  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
}

model Unit {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdUnits", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedUnits", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  quantity Float
  shortcut String

  products Product[]
  recipes Recipe[]
  userMealProducts UserMealProduct[]
  userMealRecipes UserMealRecipe[]
  recipeProducts RecipeProduct[]
  dietMealRecipes DietMealRecipe[]
  dietMealProducts DietMealProduct[]
}

model Nutrient {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdNutrients", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedNutrients", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  min Int?
  max Int?

  productNutrients ProductNutrient[]
}

model Product {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdProducts", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedProducts", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  description String?
  owner User? @relation(fields: [ownerId], references: [id])
  ownerId Int?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  quantity Int

  userMealProducts UserMealProduct[]
  productNutrients ProductNutrient[]
  recipeProducts RecipeProduct[]
  dietMealProducts DietMealProduct[]
}

model ProductNutrient {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdProductNutrients", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedProductNutrients", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  product Product @relation(fields: [productId], references: [id])
  productId Int
  nutrient Nutrient @relation(fields: [nutrientId], references: [id])
  nutrientId Int
  quantity Float
}

model Recipe {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdRecipes", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedRecipes", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  description String?
  preparation String?
  owner User? @relation(fields: [ownerId], references: [id])
  ownerId Int?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  quantity Float

  userMealRecipes UserMealRecipe[]
  recipeProducts RecipeProduct[]
  dietMealRecipes DietMealRecipe[]
}

model RecipeProduct {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdRecipeProducts", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedRecipeProducts", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  quantity Float
}

model Diet {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdDiets", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedDiets", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  description String?
  owner User? @relation(fields: [ownerId], references: [id])
  ownerId Int?
  file File? @relation(fields: [fileId], references: [id])
  fileId Int?

  userActiveDiets UserActiveDiet[]
  dietMeals DietMeal[]
}

model DietMeal {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdDietMeals", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedDietMeals", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  name String
  hour Int
  minute Int
  day Int
  diet Diet @relation(fields: [dietId], references: [id])
  dietId Int

  dietMealRecipes DietMealRecipe[]
  dietMealProducts DietMealProduct[]
}

model DietMealRecipe {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdDietMealRecipes", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedDietMealRecipes", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  dietMeal DietMeal @relation(fields: [dietMealId], references: [id])
  dietMealId Int
  recipe Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  quantity Float
}

model DietMealProduct {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdDietMealProducts", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedDietMealProducts", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  dietMeal DietMeal @relation(fields: [dietMealId], references: [id])
  dietMealId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  unit Unit @relation(fields: [unitId], references: [id])
  unitId Int
  quantity Float
}

model File {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  createdBy User? @relation("createdFiles", fields: [createdById], references: [id])
  createdById Int?
  modifiedAt DateTime @default(now())
  modifiedBy User? @relation("modifiedFiles", fields: [modifiedById], references: [id])
  modifiedById Int?
  views Int @default(0)

  type String?
  path String

  users User[]
  badges Badge[]
  personalBests PersonalBest[]
  diets Diet[]
  products Product[]
  recipes Recipe[]
}